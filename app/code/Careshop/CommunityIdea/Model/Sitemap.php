<?php

namespace Careshop\CommunityIdea\Model;

use Magento\Framework\App\ObjectManager;
use Magento\Framework\DataObject;
use Magento\Framework\Exception\NoSuchEntityException;
use Careshop\CommunityIdea\Helper\Data;
use Careshop\CommunityIdea\Helper\Image;

class Sitemap extends \Magento\Sitemap\Model\Sitemap
{
    /**
     * @var Data
     */
    protected $communityDataHelper;

    /**
     * @var Image
     */
    protected $imageHelper;

    /**
     * @var mixed
     */
    protected $router;

    /**
     * @inheritdoc
     */
    public function _initSitemapItems()
    {
        $this->_sitemapItems[] = new DataObject([
            'collection' => $this->getCommunityIdeasSiteMapCollection(),
        ]);
        $this->_sitemapItems[] = new DataObject([
            'collection' => $this->getCommunityCategoriesSiteMapCollection(),
        ]);
        $this->_sitemapItems[] = new DataObject([
            'collection' => $this->getCommunityTagsSiteMapCollection(),
        ]);
        $this->_sitemapItems[] = new DataObject([
            'collection' => $this->getCommunityTopicsSiteMapCollection(),
        ]);

        parent::_initSitemapItems(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     * @throws NoSuchEntityException
     */
    public function getCommunityIdeasSiteMapCollection()
    {
        $urlSuffix             = $this->communityDataHelper->getUrlSuffix();
        $currentStoreId        = $this->getStoreId();
        $ideaCollection        = $this->communityDataHelper->ideaFactory->create()->getCollection()
            ->addFieldToFilter('enabled', 1);
        $ideaCollection        = $this->communityDataHelper->addStoreFilter($ideaCollection, $currentStoreId);
        $ideaSiteMapCollection = [];

        if (!$this->router) {
            $this->router = 'community';
        }

        foreach ($ideaCollection as $item) {
            $images      = null;
            $publishDate = strtotime($item->getPublishDate());
            if ($publishDate > strtotime('now')) {
                continue;
            }
            if ($item->getImage()) {
                $imageFile          = $this->imageHelper->getMediaPath(
                    $item->getImage(),
                    Image::TEMPLATE_MEDIA_TYPE_IDEA
                );
                $imagesCollection   = null;
                $imagesCollection[] = new DataObject([
                    'url'     => $this->imageHelper->getMediaUrl($imageFile),
                    'caption' => null,
                ]);
                $images             = new DataObject([
                    'collection' => $imagesCollection,
                    'title'      => $item->getName()
                ]);
            }
            $ideaSiteMapCollection[] = new DataObject([
                'id'         => $item->getId(),
                'url'        => $this->router . '/idea/' . $item->getUrlKey() . $urlSuffix,
                'images'     => $images,
                'updated_at' => $item->getUpdatedAt(),
            ]);
        }

        return $ideaSiteMapCollection;
    }

    /**
     * @return array
     * @throws NoSuchEntityException
     */
    public function getCommunityCategoriesSiteMapCollection()
    {
        $urlSuffix                 = $this->communityDataHelper->getUrlSuffix();
        $categoryCollection        = $this->communityDataHelper->categoryFactory->create()->getCollection();
        $categorySiteMapCollection = [];
        $currentStoreId            = $this->getStoreId();
        $categoryCollection        = $this->communityDataHelper->addStoreFilter($categoryCollection, $currentStoreId);

        foreach ($categoryCollection as $item) {
            if ($item->getEnabled() !== null) {
                $categorySiteMapCollection[$item->getId()] = new DataObject([
                    'id'         => $item->getId(),
                    'url'        => $this->router . '/category/' . $item->getUrlKey() . $urlSuffix,
                    'updated_at' => $item->getUpdatedAt(),
                ]);
            }
        }

        return $categorySiteMapCollection;
    }

    /**
     * @return array
     * @throws NoSuchEntityException
     */
    public function getCommunityTagsSiteMapCollection()
    {
        $urlSuffix            = $this->communityDataHelper->getUrlSuffix();
        $tagCollection        = $this->communityDataHelper->tagFactory->create()->getCollection();
        $tagSiteMapCollection = [];
        $currentStoreId       = $this->getStoreId();
        $tagCollection        = $this->communityDataHelper->addStoreFilter($tagCollection, $currentStoreId);

        foreach ($tagCollection as $item) {
            if ($item->getEnabled() !== null) {
                $tagSiteMapCollection[$item->getId()] = new DataObject([
                    'id'         => $item->getId(),
                    'url'        => $this->router . '/tag/' . $item->getUrlKey() . $urlSuffix,
                    'updated_at' => $item->getUpdatedAt(),
                ]);
            }
        }

        return $tagSiteMapCollection;
    }

    /**
     * @return array
     * @throws NoSuchEntityException
     */
    public function getCommunityTopicsSiteMapCollection()
    {
        $urlSuffix              = $this->communityDataHelper->getUrlSuffix();
        $topicCollection        = $this->communityDataHelper->topicFactory->create()->getCollection();
        $topicSiteMapCollection = [];
        $currentStoreId         = $this->getStoreId();
        $topicCollection        = $this->communityDataHelper->addStoreFilter($topicCollection, $currentStoreId);

        foreach ($topicCollection as $item) {
            if ($item->getEnabled() !== null) {
                $topicSiteMapCollection[$item->getId()] = new DataObject([
                    'id'         => $item->getId(),
                    'url'        => $this->router . '/topic/' . $item->getUrlKey() . $urlSuffix,
                    'updated_at' => $item->getUpdatedAt(),
                ]);
            }
        }

        return $topicSiteMapCollection;
    }

    /**
     * Initialize resource model
     *
     * @return void
     */
    protected function _construct()
    {
        parent::_construct();

        $this->communityDataHelper = ObjectManager::getInstance()->get(Data::class);
        $this->imageHelper    = ObjectManager::getInstance()->get(Image::class);
        $this->router         = $this->communityDataHelper->getCommunityConfig('general/url_prefix');
    }
}
